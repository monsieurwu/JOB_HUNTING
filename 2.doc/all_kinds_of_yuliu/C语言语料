# C语言语料

1.编写程序，从键盘读取输入的字符，统计所有输入字符中，各个数字、空格符、换行符以及所有其它字符出现的次数。

```c
#include <stdio.h>

int main() {
    int c, i;
    int n_digit[10] = {0};
    int n_space = 0, n_newline = 0, n_other = 0;


    while ((c = getchar()) != EOF)
    {
        if (c >= '0' && c <= '9')
            n_digit[c - '0']++;
        else if (c == ' ')
            n_space++;
        else if (c == '\n')
            n_newline++;
        else
            n_other++;
    }
    for(i = 0; i < 0; i++)
    {
        printf("Number %d: %d times\n", i, n_digit[i]);
    }
    printf("space times: %d\n", n_space);
    printf("newline times: %d\n", n_newline);
    printf("other times: %d\n", n_other);
    
    return 0;
}
```



2.函数在 `array[]` 数组作参数时 通常把数组长度传入函数 因为传入的数组实际上是一个指针sizeof（array）得到的是指针的大小 而不是数组的大小



3.从键盘读入年份和这一年的第几天，计算这天是几月几日。注意闰年的计算，可以使用二维数组保存每月天数进行计算。

```c
#include <stdio.h>

int main() {
    int year, month, day_of_year;
    int is_leap_year;
    int days[2][12] = {{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}, 
                      {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}} ;

    printf("Enter year: ");
    scanf("%d", &year); 
    printf("Enter day: ");
    scanf("%d", &day_of_year);

    is_leap_year = (year % 4 == 0 && year % 100!=0) || (year % 400 == 0);

    month = 0;
    while (day_of_year > days[is_leap_year][month]) {
        day_of_year -= days[is_leap_year][month++];
    }
    printf("%d-%02d-%02d\n", year, month + 1, day_of_year);  // Month is 1-indexed.

    return 0;
}
```

重点：

- 判断闰年

```c
is_leap_year = (year % 4 == 0 && year % 100!=0) || (year % 400 == 0);
```

- 二维数组构建

```c
int days[2][12] = {{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}, 
                      {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}} ;
```

- 算月和日

```c
while (day_of_year > days[is_leap_year][month]) {
        day_of_year -= days[is_leap_year][month++];
    }
```

